{"ast":null,"code":"var _regeneratorRuntime = require(\"C:\\\\Users\\\\kanli\\\\Documents\\\\react\\\\test\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar crypto = require('crypto');\n\nvar _require = require('./utils'),\n    checkAndInit = _require.checkAndInit,\n    smix = _require.smix; // N = Cpu cost, r = Memory cost, p = parallelization cost\n\n\nfunction scrypt(key, salt, N, r, p, dkLen, progressCallback, promiseInterval) {\n  var _checkAndInit, XY, V, B32, x, _X, B, tickCallback, i;\n\n  return _regeneratorRuntime.async(function scrypt$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _checkAndInit = checkAndInit(key, salt, N, r, p, dkLen, progressCallback), XY = _checkAndInit.XY, V = _checkAndInit.V, B32 = _checkAndInit.B32, x = _checkAndInit.x, _X = _checkAndInit._X, B = _checkAndInit.B, tickCallback = _checkAndInit.tickCallback;\n          i = 0;\n\n        case 2:\n          if (!(i < p)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(smix(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval));\n\n        case 5:\n          i++;\n          _context.next = 2;\n          break;\n\n        case 8:\n          return _context.abrupt(\"return\", crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256'));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nmodule.exports = scrypt;","map":{"version":3,"sources":["C:/Users/kanli/Documents/react/test/node_modules/scryptsy/lib/scrypt.js"],"names":["crypto","require","checkAndInit","smix","scrypt","key","salt","N","r","p","dkLen","progressCallback","promiseInterval","XY","V","B32","x","_X","B","tickCallback","i","pbkdf2Sync","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;eAIIA,OAAO,CAAC,SAAD,C;IAFTC,Y,YAAAA,Y;IACAC,I,YAAAA,I,EAGF;;;AACA,SAAeC,MAAf,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2CC,KAA3C,EAAkDC,gBAAlD,EAAoEC,eAApE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BASMV,YAAY,CAACG,GAAD,EAAMC,IAAN,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,KAArB,EAA4BC,gBAA5B,CATlB,EAEIE,EAFJ,iBAEIA,EAFJ,EAGIC,CAHJ,iBAGIA,CAHJ,EAIIC,GAJJ,iBAIIA,GAJJ,EAKIC,CALJ,iBAKIA,CALJ,EAMIC,EANJ,iBAMIA,EANJ,EAOIC,CAPJ,iBAOIA,CAPJ,EAQIC,YARJ,iBAQIA,YARJ;AAWWC,UAAAA,CAXX,GAWe,CAXf;;AAAA;AAAA,gBAWkBA,CAAC,GAAGX,CAXtB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAYUN,IAAI,CAACe,CAAD,EAAIE,CAAC,GAAG,GAAJ,GAAUZ,CAAd,EAAiBA,CAAjB,EAAoBD,CAApB,EAAuBO,CAAvB,EAA0BD,EAA1B,EAA8BI,EAA9B,EAAkCF,GAAlC,EAAuCC,CAAvC,EAA0CG,YAA1C,EAAwDP,eAAxD,CAZd;;AAAA;AAWyBQ,UAAAA,CAAC,EAX1B;AAAA;AAAA;;AAAA;AAAA,2CAeSpB,MAAM,CAACqB,UAAP,CAAkBhB,GAAlB,EAAuBa,CAAvB,EAA0B,CAA1B,EAA6BR,KAA7B,EAAoC,QAApC,CAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBAY,MAAM,CAACC,OAAP,GAAiBnB,MAAjB","sourcesContent":["const crypto = require('crypto')\nconst {\n  checkAndInit,\n  smix\n} = require('./utils')\n\n// N = Cpu cost, r = Memory cost, p = parallelization cost\nasync function scrypt (key, salt, N, r, p, dkLen, progressCallback, promiseInterval) {\n  const {\n    XY,\n    V,\n    B32,\n    x,\n    _X,\n    B,\n    tickCallback\n  } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback)\n\n  for (var i = 0; i < p; i++) {\n    await smix(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval)\n  }\n\n  return crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256')\n}\n\nmodule.exports = scrypt\n"]},"metadata":{},"sourceType":"script"}